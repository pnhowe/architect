#!/usr/bin/env python3

import os
import django

os.environ.setdefault( 'DJANGO_SETTINGS_MODULE', 'architect.settings' )
django.setup()

from datetime import datetime, timedelta, timezone

from django.db.models import Count
from django.core.exceptions import ObjectDoesNotExist

from architect.Plan.models import Plan
from architect.Builder.models import Instance

from architect.Plan.caculate import caculateCounts, caculateChangePlan
from architect.Builder.lib import cleanUp, applyChanges


CLEANUP_DESTROYED_AFFTER = 3600  # in seconds

# IMPORTANT!!!! this dosen't have any locking, only one cron process at a time
# Also: this really need through testing, make sure to test when there are jobs/Actions inflight

cleanUp( CLEANUP_DESTROYED_AFFTER )

for plan in Plan.objects.filter( enabled=True ):
  print( 'Doing Plan "{0}"...'.format( plan ) )

  if plan.change_cooldown > 0 and plan.last_change > datetime.now( timezone.utc ) - timedelta( seconds=plan.change_cooldown ):
    print( 'Still Hot, skipping...' )
    continue

  complex_name_list = []
  complex_cost_list = []
  complex_availability_list = []
  complex_reliability_list = []
  try:
    for complex in plan.complex_list.all().order_by( 'name' ):  # Important the complexes are evaulated in a consistant order
      complex_name_list.append( complex.name )
      complex_cost_list.append( complex.costts.last_value )
      complex_availability_list.append( complex.availabilityts.last_value )
      complex_reliability_list.append( complex.reliabilityts.last_value )

  except ( ObjectDoesNotExist, AttributeError ):
    print( 'Complex is Missing Time Series Entries, skipping...' )
    continue

  print( complex_name_list )
  print( complex_cost_list )
  print( complex_availability_list )
  print( complex_reliability_list )

  target_map = caculateCounts( plan, complex_name_list, complex_cost_list, complex_availability_list, complex_reliability_list )

  print( 'target' )
  print( target_map )

  current_map = {}
  for blueprint_name in target_map.keys():
    current_map[ blueprint_name ] = dict( ( i[ 'complex__name' ], i[ 'count' ] ) for i in Instance.objects.filter( plan=plan, blueprint__script_name=blueprint_name ).exclude( state='destroyed' ).values( 'complex__name' ).annotate( count=Count( 'id' ) ) )

  print( 'current' )
  print( current_map )

  change_list = caculateChangePlan( plan, complex_name_list, target_map, current_map )
  print( change_list )

  if not change_list:
    continue

  plan.last_change = datetime.now( timezone.utc )
  plan.full_clean()
  plan.save()

  applyChanges( plan, change_list )
