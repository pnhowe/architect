#!/usr/bin/env python3

raise Exception( 'This is old' )

import os
import django

os.environ.setdefault( 'DJANGO_SETTINGS_MODULE', 'architect.settings' )
django.setup()

from datetime import datetime, timezone, timedelta

from architect.Contractor.models import Complex, BluePrint
from architect.Plan.models import Plan, PlanComplex, PlanBluePrint
from architect.TimeSeries.models import CostTS, AvailabilityTS, ReliabilityTS

import sys
try:
  mode = sys.argv[1]
except IndexError:
  mode = None

if mode == 'docker':
  for contractor_id in [ 'cplx01', 'cplx02', 'cplx03', 'cplx04', 'cplx05' ]:
    print( 'Adding "{0}"...'.format( contractor_id ) )
    complex = Complex( contractor_id=contractor_id, site_id='demo' )
    complex.full_clean()
    complex.save()

  for contractor_id in [ 'generic-manual-structure' ]:
    print( 'Adding "{0}"...'.format( contractor_id ) )
    blueprint = BluePrint( contractor_id=contractor_id )
    blueprint.full_clean()
    blueprint.save()

print( 'Giving Blueprints their names...')
for blueprint in BluePrint.objects.all():
  blueprint.name = blueprint.contractor_id
  blueprint.full_clean()
  blueprint.save()

print( 'Creating the Plan...' )
plan = Plan( name='test', description='test', enabled=True )
plan.script = """
#generic-manual-structure: linear( *INDEX*, 10  )
"""
plan.config_values = {}
plan.max_inflight = 4
plan.last_change = datetime.now( timezone.utc ) - timedelta( days=1 )
plan.can_build = True
plan.can_destroy = True
plan.full_clean()
plan.save()

print( 'Setting up complex buckets...' )
for complex in Complex.objects.filter( name__isnull=False ):
  costts = CostTS( complex=complex )
  costts.save()
  availts = AvailabilityTS( complex=complex )
  availts.save()
  reliabts = ReliabilityTS( complex=complex )
  reliabts.save()
  pc = PlanComplex( plan=plan, complex=complex )
  pc.cost = costts
  pc.availability = availts
  pc.reliability = reliabts
  pc.full_clean()
  pc.save()

print( 'setting up blueprint link...' )
# blueprint = BluePrint.objects.get( name='generic-xenial' )
blueprint = BluePrint.objects.get( name='generic-manual-structure' )
pb = PlanBluePrint( plan=plan, blueprint=blueprint )
pb.full_clean()
pb.save()
